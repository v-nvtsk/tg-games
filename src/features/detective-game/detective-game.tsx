import React, { useState, useCallback } from "react";
import styles from "./detective-game.module.css";
import { Room } from "./room";
import { Button } from "$ui/components/button";
import { usePlayerState, useSceneStore } from "../../core/state";
import { gameFlowManager } from "../../processes";

interface Item {
  id: string;
  name: string;
  description: string;
  emoji: string;
  found: boolean;
}

const BAG_EPISODE = 14;

const ITEMS: Item[] = [
  {
    id: "metro",
    name: "–ó–Ω–∞—á–æ–∫ –º–µ—Ç—Ä–æ",
    description: "–Ø —Å–∞–º –µ–≥–æ –ø—Ä–∏–¥—É–º–∞–ª. –ò —Å –≥–æ—Ä–¥–æ—Å—Ç—å—é –Ω–æ—à—É.",
    emoji: "üìç",
    found: false,
  },
  {
    id: "earpods",
    name: "–ù–∞—É—à–Ω–∏–∫–∏ —Å –∏–∑–æ–ª–µ–Ω—Ç–æ–π",
    description: "–•—Ä–∏–ø—è—Ç, –Ω–æ –±–ª–∏–∂–µ –≤—Å–µ—Ö. –ö–∞–∫ –±—É–¥—Ç–æ —à–µ–ø—á—É—Ç —Ç–∞–π–Ω—ã.",
    emoji: "üéß",
    found: false,
  },
  {
    id: "photo",
    name: "–û—Ç–∫—Ä—ã—Ç–∫–∞ –æ—Ç –æ—Ç—Ü–∞",
    description: "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞. –ù–æ –∏ —Ç–∞–∫ –ø–æ–Ω—è—Ç–Ω–æ.",
    emoji: "üé¥",
    found: false,
  },
  {
    id: "bottle",
    name: "–ë—É—Ç—ã–ª–∫–∞ \"–•–æ—á—É –≤ ...\"",
    description: "–ö–æ–≥–¥–∞-—Ç–æ —Ö–æ—Ç–µ–ª –≤ –ö–∞–∑–∞–Ω—å. –ü–æ—Ç–æ–º ‚Äî –Ω–µ –∑–Ω–∞—é –∫—É–¥–∞. –ú–æ–∂–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞ –¥–∏–≤–∞–Ω.",
    emoji: "üßÉ",
    found: false,
  },
  {
    id: "cassette",
    name: "–ö–∞—Å—Å–µ—Ç–∞ –¥–µ–¥–∞",
    description: "–í—Å—ë –≤–∞–∂–Ω–æ–µ –≤—Å–µ–≥–¥–∞ –∑–≤—É—á–∞–ª–æ –Ω–µ –≤ —Å–ª–æ–≤–∞—Ö, –∞ –º–µ–∂–¥—É.",
    emoji: "üìπ",
    found: false,
  },
  {
    id: "book",
    name: "–ö–Ω–∏–≥–∞ \"–ü—É—Ç—å\"",
    description: "–Ø –Ω–µ –∑–Ω–∞—é, –∫—Ç–æ –µ—ë –Ω–∞–ø–∏—Å–∞–ª. –ù–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–∞–∫ –æ—Ç–∫—Ä—ã–≤–∞—é ‚Äî –ø–æ–ø–∞–¥–∞—é –≤ —Ç–æ—á–∫—É.",
    emoji: "üìñ",
    found: false,
  },
  {
    id: "diary",
    name: "–ë–ª–æ–∫–Ω–æ—Ç",
    description: "–ö–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–π –∫–∞–¥—Ä—ã –∏–ª–∏ —Ö–æ—Ç—è –±—ã —Å—Ç—Ä–∞–Ω–Ω—ã–µ –º—ã—Å–ª–∏.",
    emoji: "üìì",
    found: false,
  },
];

export const DetectiveGame: React.FC = () => {
  const [items, setItems] = useState<Item[]>(ITEMS);
  const [showInventory, setShowInventory] = useState(false);
  const [foundItem, setFoundItem] = useState<Item | null>(null);
  const [showFoundMessage, setShowFoundMessage] = useState(false);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
  const handleItemClick = useCallback((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => {
    event.stopPropagation();
    event.preventDefault();
    const target = (event.target as HTMLElement).parentElement as HTMLElement;
    const itemID = target.id;

    const clickedItem = items.find((item) => item.id === itemID && !item.found);

    if (clickedItem) {
      clickedItem.found = true;
      setItems(items);
      setFoundItem(clickedItem);
      setShowFoundMessage(true);

      target.classList.add(styles.highLight);

      setTimeout(() => {
        setShowFoundMessage(false);
        target.classList.remove(styles.highLight);
      }, 1500);
    }
  }, [items]);

  const foundCount = items.filter((item) => item.found).length;
  const totalItems = items.length;

  const handleNext = () => {
    const scene = useSceneStore.getState().currentScene;
    usePlayerState.getState().setProgress(scene, BAG_EPISODE);
    void gameFlowManager.showIntro(BAG_EPISODE);

  };

  return (
    <div className={styles.container}>
      {/* –ö–Ω–æ–ø–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è */}
      <button
        className={styles.inventoryButton}
        onClick={() => setShowInventory(!showInventory)}
      >
        üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ({foundCount}/{totalItems})
      </button>

      {/* –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å */}
      {showInventory && (
        <div className={styles.inventory} onClick={() => setShowInventory(false)}>
          <h3>–ò—â–µ–º:</h3>
          <div className={styles.itemsList}>
            {items.map((item) => (
              <div
                key={item.id}
                className={`${styles.inventoryItem} ${item.found ? styles.found : ""}`}
              >
                <span className={styles.emoji}>{item.emoji}</span>
                <span className={styles.itemName}>{item.name}</span>
                {item.found && <span className={styles.checkmark}>‚úì</span>}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* SVG –∫–æ–º–Ω–∞—Ç–∞ */}
      <div className={styles.roomContainer}>
        <div
          className={styles.svgContainer}
        ><Room handleClick={handleItemClick} /></div>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ */}
      {showFoundMessage && foundItem && (
        <div className={styles.foundMessage}>
          <div className={styles.foundContent}>
            <div className={styles.foundEmoji}>{foundItem.emoji}</div>
            <div className={styles.foundName}>{foundItem.name}</div>
            <div className={styles.foundDescription}>{foundItem.description}</div>
          </div>
        </div>
      )}

      <div className={styles.progress}>
        –ù–∞–π–¥–µ–Ω–æ: {foundCount} –∏–∑ {totalItems}
        {foundCount === totalItems && (
          <>
            <div className={styles.completionMessage}>
              üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã!
            </div>
            <div style={{ marginTop: "5%",
              display: "flex",
              justifyContent: "center" }}>
              <Button text="–ó–∞—Å—Ç–µ–≥–Ω—É—Ç—å —Ä—é–∫–∑–∞–∫" onClick={() => handleNext()} />
            </div>
          </>
        )}
      </div>
    </div>
  );
};
